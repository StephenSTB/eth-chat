import { serviceCapabilities, serviceDependencies } from '@libp2p/interface';
import type { UPnPNATComponents, UPnPNATInit, UPnPNAT as UPnPNATInterface } from './index.js';
import type { NatAPI, MapPortOptions } from '@achingbrain/nat-port-mapper';
import type { Startable } from '@libp2p/interface';
export type { NatAPI, MapPortOptions };
export declare class UPnPNAT implements Startable, UPnPNATInterface {
    client: NatAPI;
    private readonly addressManager;
    private readonly events;
    private readonly externalAddress;
    private readonly localAddress?;
    private readonly description;
    private readonly ttl;
    private readonly keepAlive;
    private readonly gateway?;
    private started;
    private readonly log;
    private readonly gatewayDetectionTimeout;
    private readonly mappedPorts;
    private readonly onSelfPeerUpdate;
    private readonly autoConfirmAddress;
    constructor(components: UPnPNATComponents, init: UPnPNATInit);
    readonly [Symbol.toStringTag] = "@libp2p/upnp-nat";
    readonly [serviceCapabilities]: string[];
    get [serviceDependencies](): string[];
    isStarted(): boolean;
    start(): Promise<void>;
    /**
     * Stops the NAT manager
     */
    stop(): Promise<void>;
    _onSelfPeerUpdate(): void;
    private getUnmappedAddresses;
    mapIpAddresses(): Promise<void>;
    /**
     * Some ISPs have double-NATs, there's not much we can do with them
     */
    private assertNotBehindDoubleNAT;
}
//# sourceMappingURL=upnp-nat.d.ts.map