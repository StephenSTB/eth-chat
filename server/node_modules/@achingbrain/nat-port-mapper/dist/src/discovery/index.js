import ssdp from '@achingbrain/ssdp';
import { logger } from '@libp2p/logger';
import first from 'it-first';
const log = logger('nat-port-mapper:discovery');
const ST = 'urn:schemas-upnp-org:device:InternetGatewayDevice:2';
const ONE_MINUTE = 60000;
const ONE_HOUR = ONE_MINUTE * 60;
export function discoverGateway() {
    let service;
    let expires;
    return () => {
        return async (options) => {
            const timeout = options?.timeout ?? ONE_HOUR;
            if (service != null && !(expires < Date.now())) {
                return service;
            }
            if (options?.gateway != null) {
                log('using overridden gateway address %s', options.gateway);
                if (!options.gateway.startsWith('http')) {
                    options.gateway = `http://${options.gateway}`;
                }
                expires = Date.now() + timeout;
                service = {
                    location: new URL(options.gateway),
                    details: {
                        device: {
                            serviceList: {
                                service: []
                            },
                            deviceList: {
                                device: []
                            }
                        }
                    },
                    expires,
                    serviceType: ST,
                    uniqueServiceName: 'unknown'
                };
            }
            else {
                log('create discovery');
                let discovery;
                try {
                    discovery = await ssdp();
                    discovery.on('transport:outgoing-message', (socket, message, remote) => {
                        log.trace('-> Outgoing to %s:%s via %s - %s', remote.address, remote.port, socket.type, message);
                    });
                    discovery.on('transport:incoming-message', (message, remote) => {
                        log.trace('<- Incoming from %s:%s - %s', remote.address, remote.port, message);
                    });
                    const result = await first(discovery.discover({
                        ...options,
                        serviceType: ST
                    }));
                    if (result == null) {
                        throw new Error('Could not discover gateway');
                    }
                    log('discovered gateway %s', result.location);
                    expires = Date.now() + timeout;
                    service = result;
                }
                catch (err) {
                    log.error('error during service discovery - %e', err);
                }
                finally {
                    await discovery?.stop();
                }
            }
            return service;
        };
    };
}
//# sourceMappingURL=index.js.map