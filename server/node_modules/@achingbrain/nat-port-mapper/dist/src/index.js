/**
 * @packageDocumentation
 *
 * @example
 *
 * ```js
 * import { upnpNat } from '@achingbrain/nat-port-mapper'
 *
 * const client = await upnpNat({
 *   // all fields are optional
 *   ttl: number // how long mappings should live for in seconds - min 20 minutes, default 2 hours
 *   description: string // default description to pass to the router for a mapped port
 *   gateway: string // override the router address, will be auto-detected if not set
 *   keepAlive: boolean // if true, refresh the mapping ten minutes before the ttl is reached, default true
 * })
 *
 * // Map public port 1000 to private port 1000 with TCP
 * await client.map(1000, {
 *   protocol: 'TCP'
 * })
 *
 * // Map public port 2000 to private port 3000 with UDP
 * await client.map(3000, {
 *   publicPort: 2000,
 *   protocol: 'UDP'
 * })
 *
 * // Unmap previously mapped private port 1000
 * await client.unmap(1000)
 *
 * // Get external IP
 * const externalIp = await client.externalIp()
 *
 * console.log('External IP:', ip)
 *
 * // Unmap all mapped ports
 * await client.close()
 * ```
 *
 * ## Credits
 *
 * Based on [alxhotel/nat-api](https://github.com/alxhotel/nat-api)
 *
 * ## Additional Information
 *
 * - <http://miniupnp.free.fr/nat-pmp.html>
 * - <http://wikipedia.org/wiki/NAT_Port_Mapping_Protocol>
 * - <http://tools.ietf.org/html/draft-cheshire-nat-pmp-03>
 */
import { gateway4sync } from 'default-gateway';
import { discoverGateway } from './discovery/index.js';
import { NatAPI as NatAPIClass } from './nat-api.js';
import { PMPClient } from './pmp/index.js';
import { UPNPClient } from './upnp/index.js';
export function upnpNat(options = {}) {
    const client = UPNPClient.createClient(discoverGateway());
    return new NatAPIClass(client, options);
}
export function pmpNat(options = {}) {
    const client = PMPClient.createClient(discoverGateway());
    return new NatAPIClass(client, {
        ...options,
        gateway: gateway4sync().gateway
    });
}
//# sourceMappingURL=index.js.map